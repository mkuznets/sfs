// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RssPodcastItem rss podcast item
//
// swagger:model rss.PodcastItem
type RssPodcastItem struct {

	// description
	Description *RssDescription `json:"description,omitempty"`

	// enclosure
	Enclosure *RssEnclosure `json:"enclosure,omitempty"`

	// guid
	GUID *RssGUID `json:"guid,omitempty"`

	// iauthor
	Iauthor string `json:"iauthor,omitempty"`

	// iduration
	Iduration string `json:"iduration,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// pub date
	PubDate string `json:"pubDate,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this rss podcast item
func (m *RssPodcastItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnclosure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RssPodcastItem) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *RssPodcastItem) validateEnclosure(formats strfmt.Registry) error {
	if swag.IsZero(m.Enclosure) { // not required
		return nil
	}

	if m.Enclosure != nil {
		if err := m.Enclosure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enclosure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enclosure")
			}
			return err
		}
	}

	return nil
}

func (m *RssPodcastItem) validateGUID(formats strfmt.Registry) error {
	if swag.IsZero(m.GUID) { // not required
		return nil
	}

	if m.GUID != nil {
		if err := m.GUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rss podcast item based on the context it is used
func (m *RssPodcastItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnclosure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RssPodcastItem) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *RssPodcastItem) contextValidateEnclosure(ctx context.Context, formats strfmt.Registry) error {

	if m.Enclosure != nil {
		if err := m.Enclosure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enclosure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enclosure")
			}
			return err
		}
	}

	return nil
}

func (m *RssPodcastItem) contextValidateGUID(ctx context.Context, formats strfmt.Registry) error {

	if m.GUID != nil {
		if err := m.GUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RssPodcastItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RssPodcastItem) UnmarshalBinary(b []byte) error {
	var res RssPodcastItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
